#ifndef HELPER_H
#define HELPER_H 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <netdb.h>
#include <cassert>
#include <cerrno>
#include <fcntl.h> 
#include <sys/select.h>
#include <sys/types.h> 
#include <poll.h>
#include <vector>
#include <iostream>

const size_t k_max_msg = 32 << 20;

struct Conn {
    int fd = -1;
    // application's intentions, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // buffered input and output
    std::vector<uint8_t> incoming;   // data to be parsed by the application
    std::vector<uint8_t> outgoing;   // responses generated by the application
};

// TODO: Create buffer
struct Buffer {
    uint8_t *buffer_begin;
    uint8_t *buffer_end;
    uint8_t *data_begin;
    uint8_t *data_end;
};

void die(const char* s);
void msg(const char *s);
int32_t read_full(int fd, char *rbuf, size_t n);
int32_t write_all(int fd, const char *wbuf, size_t n);
void fd_set_nb(int fd);
int poll(struct pollfd *fds, nfds_t nfds, int timeout);
void buf_append(std::vector<uint8_t>& buf, const uint8_t* data, size_t len);
void buf_consume(std::vector<uint8_t> &buf, size_t n);

#endif