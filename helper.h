#ifndef HELPER_H
#define HELPER_H
// stdlib
#include <assert.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
// system
#include <sys/socket.h>
#include <netinet/ip.h>
#include <netinet/in.h>
#include <fcntl.h>
#include <poll.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <netdb.h>
#include <cassert>
#include <cerrno>
#include <fcntl.h>
#include <sys/select.h>
#include <sys/types.h>
// C++
#include <string>
#include <vector>
#include <map>

const size_t k_max_msg = 32 << 20;

// Response::status
enum
{
    RES_OK = 0,
    RES_ERR = 1, // error
    RES_NX = 2,  // key not found
};

enum
{
    TAG_NIL = 0, // nil
    TAG_ERR = 1, // error code + msg
    TAG_STR = 2, // string
    TAG_INT = 3, // int64
    TAG_DBL = 4, // double
    TAG_ARR = 5, // array
};

enum
{
    ERR_UNKNOWN = 1,
    ERR_TOO_BIG = 2,
};

// TODO: Create buffer
// struct Buffer
// {
//     uint8_t *buffer_begin;
//     uint8_t *buffer_end;
//     uint8_t *data_begin;
//     uint8_t *data_end;
// };
typedef std::vector<uint8_t> Buffer;

struct Conn
{
    int fd = -1;
    // application's intentions, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // buffered input and output
    Buffer incoming; // data to be parsed by the application
    Buffer outgoing; // responses generated by the application
};

struct Response
{
    uint32_t status = 0;
    std::vector<uint8_t> data;
};

void die(const char *s);
void msg(const char *s);
void msg_errno(const char *msg);
int32_t read_full(int fd, char *rbuf, size_t n);
int32_t write_all(int fd, const char *wbuf, size_t n);
void fd_set_nb(int fd);
int poll(struct pollfd *fds, nfds_t nfds, int timeout);

void buf_append(std::vector<uint8_t> &buf, const uint8_t *data, size_t len);
void buf_consume(std::vector<uint8_t> &buf, size_t n);
void buf_append_u8(Buffer &buf, uint8_t data);
void buf_append_u32(Buffer &buf, uint32_t data);
void buf_append_i64(Buffer &buf, int64_t data);
void buf_append_dbl(Buffer &buf, double data);

bool read_u32(const uint8_t *&cur, const uint8_t *end, uint32_t &out);
bool read_str(const uint8_t *&cur, const uint8_t *end, size_t n, std::string &out);

void out_nil(Buffer &out);
void out_str(Buffer &out, const char *s, size_t size);
void out_int(Buffer &out, int64_t val);
void out_dbl(Buffer &out, double val);
void out_err(Buffer &out, uint32_t code, const std::string &msg);
void out_arr(Buffer &out, uint32_t n);

#endif